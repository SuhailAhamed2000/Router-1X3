**/********************************************************************************************
NAME       :SUHAIL AHAMED S
DESIGN NAME:ROUTER 1X3
DATE       :24/08/2021
DESCRIPTION:REGISTER
*********************************************************************************************/
module router_register(clock,resetn,pktvalid,datain,fifo_full,rst_int_reg,detect_add,ld_state,laf_state,full_state,lfd_state,parity_done,low_pktvalid,err,dout);
  input clock,resetn,pktvalid;
  input [7:0]datain;
  input fifo_full,rst_int_reg,detect_add,ld_state,laf_state,full_state,lfd_state;
  output reg parity_done,low_pktvalid,err;
  output reg [7:0]dout;
  reg [7:0]header_byte,fifo_full_state_byte,internal_parity,packet_parity_byte;
  always @(posedge clock)
    begin
    if(!resetn)
      begin
      parity_done<=0;
      end
  else
    begin
      if(ld_state && !fifo_full && !pktvalid)
        parity_done<=1;
      else if(laf_state && low_pktvalid && !parity_done)
        parity_done<=1;
      else
        begin
          if(detect_add)
            parity_done<=0;
        end
    end
 end
  always @(posedge clock)
    begin
      if(!resetn)
        low_pktvalid<=0;
      else
        begin
          if(rst_int_reg)
            low_pktvalid<=0;
          if(!pktvalid && ld_state)
            low_pktvalid<=1;
        end
    end
  always @(posedge clock)
    begin
      if(!resetn)
        dout<=0;
      else
        begin
          if(detect_add && pktvalid && datain != 11)
            header_byte<=datain;
          else if(lfd_state)
            dout<=header_byte;
          else if(ld_state && !fifo_full)
            dout<=datain;
          else if(ld_state && fifo_full)
            fifo_full_state_byte<=datain;
          else if(laf_state)
            dout<=fifo_full_state_byte;
        end
    end
  always @(posedge clock)
    begin
      if(!resetn)
        internal_parity<=0;
      else if(detect_add)
	 internal_parity<=0;
      else if(lfd_state)
        internal_parity<=internal_parity^header_byte;
      else if(ld_state && pktvalid && !full_state)
        internal_parity<=internal_parity^datain;
      else
        internal_parity<=internal_parity;
    end
  always @(posedge clock)
    begin
      if(!resetn)
        packet_parity_byte<=0;
      else
        begin
          if(ld_state && !pktvalid)
            packet_parity_byte<=datain;
        end
    end
  always @(posedge clock)
    begin
      if(!resetn)
        err<=0;
      else
        begin
          if(parity_done)
            begin
              if(internal_parity != packet_parity_byte)
                err<=1;
              else
                err<=0;
            end
        end
    end
endmodule
